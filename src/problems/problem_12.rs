use super::{utils::prime_factors_cached, Result};
use std::collections::HashMap;

/*
Problem 12:
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

Answer: 76576500
*/

pub struct Options {
    divisors: usize,
}

impl Default for Options {
    fn default() -> Self {
        Self { divisors: 501 }
    }
}

pub fn solve(options: Options) -> Result<usize> {
    let mut triangle_num = 1;

    let mut prime_factors_map = HashMap::new();
    let mut primes_map = HashMap::new();

    let mut i = 2;
    while num_of_divisors(triangle_num, &mut prime_factors_map, &mut primes_map) < options.divisors
    {
        triangle_num += i;
        i += 1;
    }

    Ok(triangle_num)
}

fn num_of_divisors(
    n: usize,
    prime_factors_map: &mut HashMap<usize, Vec<usize>>,
    primes_map: &mut HashMap<usize, bool>,
) -> usize {
    let prime_factors = prime_factors_cached(n, prime_factors_map, primes_map);

    let mut prime_counts = HashMap::new();
    prime_factors.iter().for_each(|&prime| {
        // start at 1, as 1 needs to be added to the count of each prime in order to get the number of divisors
        let count = *prime_counts.get(&prime).unwrap_or(&1);

        prime_counts.insert(prime, count + 1);
    });

    let result = prime_counts.values().product();

    result
}
