use super::Result;

/*
Problem 2:
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/

pub struct Options {
    max: usize,
}

impl Default for Options {
    fn default() -> Self {
        Self { max: 4_000_000 }
    }
}

pub fn solve(options: Options) -> Result<usize> {
    let mut f1 = 1;
    let mut f2 = 2;

    let mut sum = 0;

    while f2 <= options.max {
        if f2 % 2 == 0 {
            sum += f2;
        }

        std::mem::swap(&mut f1, &mut f2);
        f2 += f1;
    }

    Ok(sum)
}
